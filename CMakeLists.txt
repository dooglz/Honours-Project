#Project root
cmake_minimum_required (VERSION 2.6)
CMAKE_POLICY(SET CMP0012 NEW) 
project (Honours)

if( CMAKE_SIZEOF_VOID_P EQUAL 8 )
    MESSAGE( "64 bits compiler detected" )
    SET( EX_PLATFORM 64 )
    SET( EX_PLATFORM_NAME "x64" )
	SET( EX_PLATFORM_NAME_S "64" )
else( CMAKE_SIZEOF_VOID_P EQUAL 8 ) 
    MESSAGE( "32 bits compiler detected" )
    SET( EX_PLATFORM 32 )
    SET( EX_PLATFORM_NAME "x86" )
	SET( EX_PLATFORM_NAME_S "86" )
endif( CMAKE_SIZEOF_VOID_P EQUAL 8 )

if(!MSVC)
	include(CheckCXXCompilerFlag)
	CHECK_CXX_COMPILER_FLAG("-std=c++11" COMPILER_SUPPORTS_CXX11)
	CHECK_CXX_COMPILER_FLAG("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
	if(COMPILER_SUPPORTS_CXX11)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")
	elseif(COMPILER_SUPPORTS_CXX0X)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++0x")
	else()
		message(STATUS "The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.")
	endif(COMPILER_SUPPORTS_CXX11)
endif(!MSVC)

SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG 	${CMAKE_BINARY_DIR}/bin_${EX_PLATFORM_NAME_S}_debug)
SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/bin_${EX_PLATFORM_NAME_S}_release)
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG 	${CMAKE_BINARY_DIR}/lib_${EX_PLATFORM_NAME_S}_debug)
SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/lib_${EX_PLATFORM_NAME_S}_release)
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG 	${CMAKE_BINARY_DIR}/lib_${EX_PLATFORM_NAME_S}_debug)
SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR}/lib_${EX_PLATFORM_NAME_S}_release)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_SOURCE_DIR}/cmake/")
find_package(OpenCLCustom)

MESSAGE( "OpenCL_FOUND  ${OpenCL_FOUND}")
MESSAGE( "OpenCL_INCLUDE_DIRS  ${OpenCL_INCLUDE_DIRS}")
MESSAGE( "OpenCL_LIBRARIES  ${OpenCL_LIBRARIES}")
MESSAGE( "OpenCL_VERSION_STRING  ${OpenCL_VERSION_STRING}")
MESSAGE( "OpenCL_VERSION_MAJOR ${OpenCL_VERSION_MAJOR}")
MESSAGE( "OpenCL_VERSION_MINOR  ${OpenCL_VERSION_MINOR}")
MESSAGE( "OpenCL_INCLUDE_DIR  ${OpenCL_INCLUDE_DIR}")
MESSAGE( "OpenCL_LIBRARY ${OpenCL_LIBRARY}")

if(OpenCL_INCLUDE_DIRS)
	include_directories (${OpenCL_INCLUDE_DIRS})
endif(OpenCL_INCLUDE_DIRS)

if(DEFINED ENV{CUDA_PATH})
	MESSAGE( "Cuda Path = $ENV{CUDA_PATH}" )
	SET(CUDA true)
elseif(DEFINED ENV{AMDAPPSDKROOT})
	MESSAGE( "AMD Path = $ENV{AMDAPPSDKROOT}" )
	SET(CUDA true)
endif(DEFINED ENV{CUDA_PATH})

add_subdirectory(src)
